package serverModule.util;

import common.collection.Coordinates;
import common.collection.Discipline;
import common.collection.LabWork;
import common.util.User;
import serverModule.data.MemoryData;

import java.sql.*;
import java.util.Scanner;

public class DatabaseManager {

    private final String JDBC_DRIVER = "org.postgresql.Driver";
    private final String url = "jdbc:postgresql://localhost:5432/nastyabeggin"; // for local
    //private final String url = "jdbc:postgresql://pg:5432/studs"; // for helios
    private String user = "nastyabeggin";
    private String password = "123";
    private Connection connection;

    public DatabaseManager() {
        doConnectionToDatabase();
    }

    private void doConnectionToDatabase() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Подключение к базе данных...");
        boolean tempFlag = true;
        while (tempFlag) {
            System.out.println("Введите логин:");
            this.user = scanner.nextLine();
            System.out.println("Введите пароль:");
            this.password = scanner.nextLine();
            if (this.password == null) {
                System.out.println("Пароль не может быть пустым! Введите пароль:");
                this.password = scanner.nextLine();
            }
            try {
                Class.forName(JDBC_DRIVER);
                connection = DriverManager.getConnection(url, user, password);
                System.out.println("Соединение с базой данных установлено!");
                createTableIfNotExists(SQLConstants.CREATE_USER_TABLE);
                createTableIfNotExists(SQLConstants.CREATE_COORDINATES_TABLE);
                createTableIfNotExists(SQLConstants.CREATE_DISCIPLINE_TABLE);
                createTableIfNotExists(SQLConstants.CREATE_LABWORK_TABLE);
                initUsersFromDb();
                initLabsFromDb();
                break;
            } catch (SQLException e) {
                System.out.println("Произошла ошибка при подключении к базе данных!");
                System.out.println("Проверьте правильность ввода логина и пароля!");
            } catch (ClassNotFoundException e) {
                System.out.println("Драйвер управления базой данных не найден!" + e);
                tempFlag = false;
            }
        }
    }

    public PreparedStatement doPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException e) {
            if (connection == null) {
                System.out.println("Соединение с базой данных не установлено!");
            }
            throw new SQLException();
        }
    }

    public void closePreparedStatement(PreparedStatement preparedStatement) {
        if (preparedStatement == null) return;
        try {
            preparedStatement.close();
        } catch (SQLException e) {
            System.out.println("Не удалось закрыть SQL-запрос");
        }
    }

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            System.out.println("Соединение с базой данных разорвано!");
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    public void setCommit() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при установлении 'commit'!");
        }
    }

    public void setAutoCommit() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при установлении 'auto_commit'!");
        }
    }

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException e) {
            System.out.println("Произошла ошибка при сохранении состояния базы данных!");
        }
    }

    private void createTableIfNotExists(String creationScript) {
        PreparedStatement preparedStatement = null;
        try {
            preparedStatement = connection.prepareStatement(creationScript);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void initUsersFromDb() {
        PreparedStatement preparedStatement = null;
        try {
            preparedStatement = connection.prepareStatement(SQLConstants.SELECT_ALL_USERS);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                MemoryData.putUser(
                        resultSet.getLong(SQLConstants.USER_TABLE_ID_COLUMN),
                        new User(
                                resultSet.getString(SQLConstants.USER_TABLE_USERNAME_COLUMN),
                                resultSet.getString(SQLConstants.USER_TABLE_PASSWORD_COLUMN)
                        )
                );
            }
            if (MemoryData.getUsers().size() == 0) {
                System.out.println("В таблице user отсутствуют данные!");
            } else {
                System.out.println("В память было добавлено " + MemoryData.getUsers().size() + " пользователей!");
            }
            System.out.println(MemoryData.getUsers());
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void initLabsFromDb() {
        PreparedStatement preparedStatement = null;
        try {
            preparedStatement = connection.prepareStatement(SQLConstants.SELECT_ALL_LABWORKS_WITH_DISCIPLINES_AND_COORDINATES);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                MemoryData.putLab(
                        resultSet.getLong(SQLConstants.LABWORK_ID),
                        new LabWork(
                                resultSet.getLong(SQLConstants.LABWORK_ID),
                                resultSet.getString(SQLConstants.LABWORK_NAME),
                                new Coordinates(
                                        resultSet.getLong(SQLConstants.COORDINATES_TABLE_X_COLUMN),
                                        resultSet.getInt(SQLConstants.COORDINATES_TABLE_Y_COLUMN)
                                ),
                                resultSet.getFloat(SQLConstants.LABWORK_TABLE_STUDENTS_MINIMAL_POINT_COLUMN),
                                resultSet.getLong(SQLConstants.LABWORK_TABLE_AVERAGE_POINT_COLUMN),
                                resultSet.getString(SQLConstants.LABWORK_TABLE_DIFFICULTY_COLUMN),
                                new Discipline(
                                        resultSet.getString(SQLConstants.DISCIPLINE_NAME),
                                        resultSet.getLong(SQLConstants.DISCIPLINE_LECTURE_HOURS_COLUMN),
                                        resultSet.getInt(SQLConstants.DISCIPLINE_PRACTICE_HOURS_COLUMN),
                                        resultSet.getLong(SQLConstants.DISCIPLINE_LABS_COUNT_COLUMN)
                                )

                        )
                );
            }
            if (MemoryData.getLabs().size() == 0) {
                System.out.println("В таблице user отсутствуют данные!");
            } else {
                System.out.println("В память было добавлено " + MemoryData.getLabs().size() + " лабораторных!");
            }
            System.out.println(MemoryData.getLabs());
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


}
